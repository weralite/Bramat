{"version":3,"file":"mosaic-image-grid/index.js","mappings":"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","sources":["webpack://tailpress/./src/mosaic-image-grid/edit.js","webpack://tailpress/external window \"ReactJSXRuntime\"","webpack://tailpress/external window [\"wp\",\"blockEditor\"]","webpack://tailpress/external window [\"wp\",\"blocks\"]","webpack://tailpress/external window [\"wp\",\"components\"]","webpack://tailpress/webpack/bootstrap","webpack://tailpress/webpack/runtime/compat get default export","webpack://tailpress/webpack/runtime/define property getters","webpack://tailpress/webpack/runtime/hasOwnProperty shorthand","webpack://tailpress/webpack/runtime/make namespace object","webpack://tailpress/./src/mosaic-image-grid/index.js"],"sourcesContent":["import { useBlockProps, MediaUpload, MediaPlaceholder, BlockControls, InspectorControls } from '@wordpress/block-editor';\r\nimport { Button, ToolbarGroup, ToolbarButton, PanelBody, PanelRow } from '@wordpress/components';\r\n\r\nexport default function Edit({ attributes, setAttributes }) {\r\n    const blockProps = useBlockProps();\r\n    const { images = [] } = attributes; // Ensure images is initialized as an empty array\r\n\r\n    const addImage = (media) => {\r\n        setAttributes({\r\n            images: [...images, {\r\n                url: media.url,\r\n                id: media.id,\r\n                alt: media.alt || 'Our beautiful image',\r\n            }],\r\n        });\r\n    };\r\n\r\n    const removeImage = (index) => {\r\n        const newImages = images.filter((_, i) => i !== index);\r\n        setAttributes({ images: newImages });\r\n    };\r\n\r\n    const updateImage = (index, media) => {\r\n        const newImages = images.map((img, i) => i === index ? {\r\n            url: media.url,\r\n            id: media.id,\r\n            alt: media.alt || 'Our beautiful image',\r\n        } : img);\r\n        setAttributes({ images: newImages });\r\n    };\r\n\r\n    return (\r\n        <div {...blockProps}>\r\n            <BlockControls>\r\n                <ToolbarGroup>\r\n                    <MediaUpload\r\n                        onSelect={addImage}\r\n                        allowedTypes={['image']}\r\n                        render={({ open }) => (\r\n                            <ToolbarButton\r\n                                icon=\"plus\"\r\n                                label=\"Add Image\"\r\n                                onClick={open}\r\n                            />\r\n                        )}\r\n                    />\r\n                </ToolbarGroup>\r\n            </BlockControls>\r\n            <InspectorControls>\r\n                <PanelBody title=\"Image Settings\" initialOpen={true}>\r\n                    <PanelRow>\r\n                        <MediaUpload\r\n                            onSelect={addImage}\r\n                            allowedTypes={['image']}\r\n                            render={({ open }) => (\r\n                                <Button\r\n                                    style={{ width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                                    isPrimary\r\n                                    onClick={open}\r\n                                >\r\n                                    Add Image\r\n                                </Button>\r\n                            )}\r\n                        />\r\n                    </PanelRow>\r\n\r\n                    {images.map((image, index) => (\r\n\r\n                        <PanelRow key={index}>\r\n                            <div style={{ display: 'flex', flexDirection: 'column'}}>\r\n                            <img src={image.url} alt={image.alt} style={{ width: '100%', height: 'auto', objectFit: 'cover', marginBottom: '10px' }} />\r\n                            <MediaUpload\r\n                                onSelect={(media) => updateImage(index, media)}\r\n                                allowedTypes={['image']}\r\n                                value={image.id}\r\n                                render={({ open }) => (\r\n                                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 2, width: '100%' }}>\r\n                                        <Button\r\n                                            isPrimary\r\n                                            onClick={open}\r\n                                            style={{  width: '90%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                                        >\r\n                                            Edit Image\r\n                                        </Button>\r\n                                        <Button\r\n                                          \r\n                                            onClick={() => removeImage(index)}\r\n                                            style={{  width: '90%', display: 'flex', justifyContent: 'center', alignItems: 'center', backgroundColor: 'red', color: 'white' }}\r\n                                        >\r\n                                            Remove Image\r\n                                        </Button>\r\n                                    </div>\r\n                                )}\r\n                            />\r\n                          </div>  \r\n                        </PanelRow>\r\n                    ))}\r\n                </PanelBody>\r\n            </InspectorControls>\r\n            {images.length > 0 ? (\r\n                images.map((image, index) => (\r\n                    <img key={index} src={image.url} alt={image.alt} style={{ width: '100%', height: 'auto', objectFit: 'cover', marginBottom: '10px' }} />\r\n                ))\r\n            ) : (\r\n                <MediaPlaceholder\r\n                    onSelect={addImage}\r\n                    allowedTypes={['image']}\r\n                    labels={{ title: 'Select Images' }}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}","module.exports = window[\"ReactJSXRuntime\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { InnerBlocks } from \"@wordpress/block-editor\"\nimport { registerBlockType } from \"@wordpress/blocks\"\nimport metadata from \"./block.json\"\nimport Edit from \"./edit\"\n\nregisterBlockType(metadata.name, {\n  edit: Edit,\n  save: function () {\n    return <InnerBlocks.Content />\n  }\n})\n"],"names":["useBlockProps","MediaUpload","MediaPlaceholder","BlockControls","InspectorControls","Button","ToolbarGroup","ToolbarButton","PanelBody","PanelRow","jsx","_jsx","jsxs","_jsxs","Edit","attributes","setAttributes","blockProps","images","addImage","media","url","id","alt","removeImage","index","newImages","filter","_","i","updateImage","map","img","children","onSelect","allowedTypes","render","open","icon","label","onClick","title","initialOpen","style","width","display","justifyContent","alignItems","isPrimary","image","flexDirection","src","height","objectFit","marginBottom","value","gap","backgroundColor","color","length","labels","InnerBlocks","registerBlockType","metadata","name","edit","save","Content"],"sourceRoot":""}